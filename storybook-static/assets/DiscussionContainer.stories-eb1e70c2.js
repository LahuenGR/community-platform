import{a as n}from"./jsx-runtime-913be41c.js";import{r as p}from"./index-2506bfc3.js";import{c as l}from"./utils-1b1bed3d.js";import{c as e}from"./UserEngagementWrapper-80aba139.js";import"./index-a7768622.js";import"./Button-86c88f1c.js";import"./Icon-be18d991.js";import"./theme-ui-core-jsx-runtime.esm-9bc3c749.js";import"./emotion-element-6a883da9.browser.esm-becb4ad2.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-11801e73.js";import"./hoist-non-react-statics.cjs-dd442a32.js";import"./theme-ui-css.esm-a1197288.js";import"./emotion-styled.browser.esm-935c8bd8.js";import"./icon-verified-badge-3c009cbf.js";import"./icon-star-active-309631d9.js";import"./theme-ui-components.esm-784287e5.js";import"./emotion-react.browser.esm-ac7fc07b.js";import"./CreateComment-6120cd48.js";import"./index-54304c9c.js";import"./index-0dfb046a.js";import"./index-150eb7c2.js";import"./MemberBadge-a0c54109.js";import"./ExternalLink-299075d0.js";import"./Select-3bfd1bb4.js";import"./isNativeReflectConstruct-7f9e7527.js";import"./ElWithBeforeIcon-bfad359c.js";import"./FieldDatepicker-3af30642.js";import"./FieldInput-bd380294.js";import"./CharacterCount-ef389ffa.js";import"./FieldTextarea-3d00f174.js";import"./Username-259912a7.js";import"./index-4d501b15.js";import"./InternalLink-53f45de4.js";import"./GlobalStyles-6382182d.js";import"./ImageGallery-a941a3cd.js";import"./iframe-a65cba0a.js";import"../sb-preview/runtime.js";import"./Loader-25159258.js";import"./MapMemberCard-577ffa07.js";import"./Modal-edae582c.js";import"./ModerationStatus-3b9fa1d2.js";import"./MoreContainer-58244bef.js";import"./NotificationItem-41501478.js";import"./NotificationList-18bc94da.js";import"./OsmGeocoding-362e7475.js";import"./ProfileLink-02e240e8.js";import"./ResearchEditorOverview-63fb84aa.js";import"./Tag-1587e022.js";import"./TextNotification-2d34cd0a.js";import"./Tooltip-60f84766.js";import"./UserStatistics-e9dff82b.js";import"./VideoPlayer-060df872.js";import"./BlockedRoute-956feaf5.js";import"./TabbedContent-dbf187d0.js";import"./DiscussionTitle-b470b4e1.js";import"./inheritsLoose-0022215d.js";const $e={title:"Components/DiscussionContainer",component:e},R=l(3),M=l(15),m={render:()=>n(e,{comments:R,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:"",onChange:()=>null,onMoreComments:()=>null,onSubmit:()=>null,isLoggedIn:!1})},r={render:()=>n(e,{comments:[],handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:"",onChange:()=>null,onMoreComments:()=>null,onSubmit:()=>null,isLoggedIn:!1})},s={render:()=>{const[o,t]=p.useState("");return n(e,{comments:R,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:t,onMoreComments:()=>null,onSubmit:()=>null,isLoggedIn:!0})}},i={render:()=>{const[o,t]=p.useState("");return n(e,{comments:M,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:t,onMoreComments:()=>null,onSubmit:()=>null,isLoggedIn:!0})}},a={render:()=>{const[o,t]=p.useState(""),c=l(3);return c[0].replies=l(2),n(e,{supportReplies:!0,comments:c,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),maxLength:1e3,comment:o,onChange:t,onMoreComments:()=>null,onSubmit:()=>null,isLoggedIn:!0,onSubmitReply:async(k,q)=>alert(`reply to commentId: ${k} with comment: ${q}`)})}};var d,u,h;m.parameters={...m.parameters,docs:{...(d=m.parameters)==null?void 0:d.docs,source:{originalSource:`{
  render: () => {
    return <DiscussionContainer comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={''} onChange={() => null} onMoreComments={() => null} onSubmit={() => null} isLoggedIn={false} />;
  }
}`,...(h=(u=m.parameters)==null?void 0:u.docs)==null?void 0:h.source}}};var g,C,v;r.parameters={...r.parameters,docs:{...(g=r.parameters)==null?void 0:g.docs,source:{originalSource:`{
  render: () => {
    return <DiscussionContainer comments={[]} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={''} onChange={() => null} onMoreComments={() => null} onSubmit={() => null} isLoggedIn={false} />;
  }
}`,...(v=(C=r.parameters)==null?void 0:C.docs)==null?void 0:v.source}}};var P,E,S;s.parameters={...s.parameters,docs:{...(P=s.parameters)==null?void 0:P.docs,source:{originalSource:`{
  render: () => {
    const [comment, setComment] = useState<string>('');
    return <DiscussionContainer comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} isLoggedIn={true} />;
  }
}`,...(S=(E=s.parameters)==null?void 0:E.docs)==null?void 0:S.source}}};var L,D,f;i.parameters={...i.parameters,docs:{...(L=i.parameters)==null?void 0:L.docs,source:{originalSource:`{
  render: () => {
    const [comment, setComment] = useState<string>('');
    return <DiscussionContainer comments={expandableFakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} isLoggedIn={true} />;
  }
}`,...(f=(D=i.parameters)==null?void 0:D.docs)==null?void 0:f.source}}};var x,b,I;a.parameters={...a.parameters,docs:{...(x=a.parameters)==null?void 0:x.docs,source:{originalSource:`{
  render: () => {
    const [comment, setComment] = useState<string>('');
    const fakeComments = createFakeComments(3);
    fakeComments[0].replies = createFakeComments(2);
    return <DiscussionContainer supportReplies={true} comments={fakeComments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} maxLength={1000} comment={comment} onChange={setComment} onMoreComments={() => null} onSubmit={() => null} isLoggedIn={true} onSubmitReply={async (commentId, comment) => alert(\`reply to commentId: \${commentId} with comment: \${comment}\`)} />;
  }
}`,...(I=(b=a.parameters)==null?void 0:b.docs)==null?void 0:I.source}}};const _e=["Default","NoComments","LoggedIn","Expandable","WithReplies"];export{m as Default,i as Expandable,s as LoggedIn,r as NoComments,a as WithReplies,_e as __namedExportsOrder,$e as default};
//# sourceMappingURL=DiscussionContainer.stories-eb1e70c2.js.map

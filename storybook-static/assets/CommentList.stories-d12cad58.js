import{a as l}from"./jsx-runtime-913be41c.js";import{c as r}from"./UsefulStatsButton-fb50f616.js";import{y as e}from"./index-a7768622.js";import"./index-2506bfc3.js";import"./Button-8948e584.js";import"./Icon-2ae3ebb0.js";import"./theme-ui-core-jsx-runtime.esm-9bc3c749.js";import"./emotion-element-6a883da9.browser.esm-becb4ad2.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-11801e73.js";import"./hoist-non-react-statics.cjs-dd442a32.js";import"./theme-ui-css.esm-a1197288.js";import"./emotion-styled.browser.esm-935c8bd8.js";import"./flag-unknown-42829506.js";import"./icon-star-active-309631d9.js";import"./theme-ui-components.esm-1dc2aee2.js";import"./emotion-react.browser.esm-ac7fc07b.js";import"./CategoryTag-80c505ae.js";import"./CreateComment-3043e0bf.js";import"./index-54304c9c.js";import"./index-0dfb046a.js";import"./index-150eb7c2.js";import"./MemberBadge-3c362eb1.js";import"./ExternalLink-2abf30d0.js";import"./ElWithBeforeIcon-95ae967b.js";import"./FieldDatepicker-5dda0e68.js";import"./FieldInput-5aa9c9b1.js";import"./CharacterCount-6182a3a8.js";import"./FieldTextarea-49141921.js";import"./Username-854c318a.js";import"./index-4d501b15.js";import"./InternalLink-76563b2f.js";import"./GlobalStyles-1d26314a.js";import"./ImageGallery-e3f9f2c4.js";import"./iframe-f4e50d02.js";import"../sb-preview/runtime.js";import"./Loader-c7f288df.js";import"./MapMemberCard-b33e6510.js";import"./Modal-a1596988.js";import"./ModerationStatus-00d6f2b1.js";import"./MoreContainer-81df695e.js";import"./NotificationItem-d7a42f6d.js";import"./NotificationList-9a1b8dac.js";import"./OsmGeocoding-e4677ae9.js";import"./ProfileLink-a007326e.js";import"./ResearchEditorOverview-e884ffa4.js";import"./Select-3f37cb56.js";import"./isNativeReflectConstruct-7f9e7527.js";import"./TextNotification-ee9ce1b7.js";import"./Tooltip-60f84766.js";import"./UserStatistics-d585ae25.js";import"./VideoPlayer-f1d74b7b.js";import"./BlockedRoute-6d78fd4a.js";import"./TabbedContent-dbf187d0.js";import"./inheritsLoose-0022215d.js";const t=(o={})=>({_created:e.date.past().toString(),creatorCountry:e.address.countryCode().toLowerCase(),_creatorId:e.internet.userName(),_id:e.database.mongodbObjectId(),creatorName:e.internet.userName(),isUserVerified:e.datatype.boolean(),text:e.lorem.text(),isEditable:e.datatype.boolean(),...o}),d=(o=2,k={})=>[...Array(o).keys()].slice(0).map(()=>t({...k})),ye={title:"Components/CommentList",component:r},m=()=>l(r,{comments:d(2),articleTitle:"Test article",handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve()}),i=()=>l(r,{comments:d(20),articleTitle:"Test article",handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve()}),s=()=>{const o=[t({replies:[t(),t()]}),t(),t()];return l(r,{comments:o,articleTitle:"Test article",handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve()})},n=d(20,{isEditable:!1}),a=()=>l(r,{comments:n,highlightedCommentId:n[n.length-2]._id,articleTitle:"Test article",handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve()});var p,c,h;m.parameters={...m.parameters,docs:{...(p=m.parameters)==null?void 0:p.docs,source:{originalSource:'() => <CommentList comments={createFakeComments(2)} articleTitle="Test article" handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} />',...(h=(c=m.parameters)==null?void 0:c.docs)==null?void 0:h.source}}};var u,C,g;i.parameters={...i.parameters,docs:{...(u=i.parameters)==null?void 0:u.docs,source:{originalSource:'() => <CommentList comments={createFakeComments(20)} articleTitle="Test article" handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} />',...(g=(C=i.parameters)==null?void 0:C.docs)==null?void 0:g.source}}};var v,P,E;s.parameters={...s.parameters,docs:{...(v=s.parameters)==null?void 0:v.docs,source:{originalSource:`() => {
  // TODO: This is a temporary solution to get nested comments to pass type check
  const comments: any = [fakeComment({
    replies: [fakeComment(), fakeComment()]
  }), fakeComment(), fakeComment()];
  return <CommentList comments={comments} articleTitle="Test article" handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} />;
}`,...(E=(P=s.parameters)==null?void 0:P.docs)==null?void 0:E.source}}};var T,f,L;a.parameters={...a.parameters,docs:{...(T=a.parameters)==null?void 0:T.docs,source:{originalSource:'() => <CommentList comments={highlightedCommentList} highlightedCommentId={highlightedCommentList[highlightedCommentList.length - 2]._id} articleTitle="Test article" handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} />',...(L=(f=a.parameters)==null?void 0:f.docs)==null?void 0:L.source}}};const De=["Default","Expandable","WithNestedComments","Highlighted"];export{m as Default,i as Expandable,a as Highlighted,s as WithNestedComments,De as __namedExportsOrder,ye as default};
//# sourceMappingURL=CommentList.stories-d12cad58.js.map

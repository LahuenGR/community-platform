import{a as i}from"./jsx-runtime-913be41c.js";import{c as l,f as e}from"./utils-1b1bed3d.js";import{d as o}from"./UsefulStatsButton-a428c615.js";import"./index-2506bfc3.js";import"./index-a7768622.js";import"./Button-09f68042.js";import"./Icon-ce3fd2be.js";import"./theme-ui-core-jsx-runtime.esm-9bc3c749.js";import"./emotion-element-6a883da9.browser.esm-becb4ad2.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-11801e73.js";import"./hoist-non-react-statics.cjs-dd442a32.js";import"./theme-ui-css.esm-a1197288.js";import"./emotion-styled.browser.esm-935c8bd8.js";import"./icon-verified-badge-3c009cbf.js";import"./icon-star-active-309631d9.js";import"./theme-ui-components.esm-1dc2aee2.js";import"./emotion-react.browser.esm-ac7fc07b.js";import"./CategoryTag-80c505ae.js";import"./CreateComment-efeea501.js";import"./index-54304c9c.js";import"./index-0dfb046a.js";import"./index-150eb7c2.js";import"./MemberBadge-3c362eb1.js";import"./ExternalLink-2abf30d0.js";import"./Select-3f37cb56.js";import"./isNativeReflectConstruct-7f9e7527.js";import"./ElWithBeforeIcon-95ae967b.js";import"./FieldDatepicker-5dda0e68.js";import"./FieldInput-5aa9c9b1.js";import"./CharacterCount-6182a3a8.js";import"./FieldTextarea-49141921.js";import"./Username-2c9ab012.js";import"./index-4d501b15.js";import"./InternalLink-76563b2f.js";import"./GlobalStyles-2fddc22a.js";import"./ImageGallery-7f53ad63.js";import"./iframe-5663d4cc.js";import"../sb-preview/runtime.js";import"./Loader-ec1a78f7.js";import"./MapMemberCard-6315ae8f.js";import"./Modal-a56b8373.js";import"./ModerationStatus-00d6f2b1.js";import"./MoreContainer-81df695e.js";import"./NotificationItem-be9d4e39.js";import"./NotificationList-42896c48.js";import"./OsmGeocoding-baff8f06.js";import"./ProfileLink-275fff83.js";import"./ResearchEditorOverview-f78d5056.js";import"./TextNotification-ee9ce1b7.js";import"./Tooltip-60f84766.js";import"./UserStatistics-13214e8f.js";import"./VideoPlayer-7a214aec.js";import"./BlockedRoute-a656294e.js";import"./TabbedContent-dbf187d0.js";import"./DiscussionTitle-f1399b7f.js";import"./inheritsLoose-0022215d.js";const qe={title:"Components/CommentList",component:o},t=()=>i(o,{comments:l(2),handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),onMoreComments:()=>null}),m=()=>i(o,{comments:l(20),handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),onMoreComments:()=>null}),r=()=>{const D=[e({replies:[e(),e()]}),e(),e()];return i(o,{comments:D,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),onMoreComments:()=>Promise.resolve()})},n=l(20,{isEditable:!1}),s=()=>i(o,{comments:n,highlightedCommentId:n[n.length-2]._id,handleDelete:()=>Promise.resolve(),handleEditRequest:()=>Promise.resolve(),handleEdit:()=>Promise.resolve(),onMoreComments:()=>null});var a,p,d;t.parameters={...t.parameters,docs:{...(a=t.parameters)==null?void 0:a.docs,source:{originalSource:"() => <CommentList comments={createFakeComments(2)} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} onMoreComments={() => null} />",...(d=(p=t.parameters)==null?void 0:p.docs)==null?void 0:d.source}}};var h,c,C;m.parameters={...m.parameters,docs:{...(h=m.parameters)==null?void 0:h.docs,source:{originalSource:"() => <CommentList comments={createFakeComments(20)} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} onMoreComments={() => null} />",...(C=(c=m.parameters)==null?void 0:c.docs)==null?void 0:C.source}}};var u,v,P;r.parameters={...r.parameters,docs:{...(u=r.parameters)==null?void 0:u.docs,source:{originalSource:`() => {
  // TODO: This is a temporary solution to get nested comments to pass type check
  const comments: any = [fakeComment({
    replies: [fakeComment(), fakeComment()]
  }), fakeComment(), fakeComment()];
  return <CommentList comments={comments} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} onMoreComments={() => Promise.resolve()} />;
}`,...(P=(v=r.parameters)==null?void 0:v.docs)==null?void 0:P.source}}};var g,E,f;s.parameters={...s.parameters,docs:{...(g=s.parameters)==null?void 0:g.docs,source:{originalSource:"() => <CommentList comments={highlightedCommentList} highlightedCommentId={highlightedCommentList[highlightedCommentList.length - 2]._id} handleDelete={() => Promise.resolve()} handleEditRequest={() => Promise.resolve()} handleEdit={() => Promise.resolve()} onMoreComments={() => null} />",...(f=(E=s.parameters)==null?void 0:E.docs)==null?void 0:f.source}}};const Me=["Default","Expandable","WithNestedComments","Highlighted"];export{t as Default,m as Expandable,s as Highlighted,r as WithNestedComments,Me as __namedExportsOrder,qe as default};
//# sourceMappingURL=CommentList.stories-a059f46c.js.map
